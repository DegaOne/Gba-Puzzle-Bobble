//SET UP DATA (ONCE, AT GAME STARTUP)

#include <math.h>

//First character base address (Tile Viewer tiles)= VRAM = 0x06000000
unsigned int * myBgCharBase = (unsigned int*) 0x06000000;
//Last character base address
unsigned int * myObjCharBase = (unsigned int*) 0x6010000;
//Tile viewer data variables
extern const unsigned int objCharData[];
extern const unsigned int charBase1Data[];
//First Object Attribute Memory address
unsigned short* myOAM = (unsigned short*) 0x07000000;
//Modify display control register (DISPCNT) flags / settings at address 0x04000000 defined as REG_BASE on include file "gba_base.h"
unsigned short * myDispcnt = (unsigned short*) 0x04000000;
//First Background Palette address
unsigned short* myBgPalette = (unsigned short*) 0x05000000;
//First Sprite Palette address
unsigned short* myObjPalette = (unsigned short*) 0x05000200;
//Screen base blocks
unsigned short * myScreenBase4 = (unsigned short*) 0x06002000;
unsigned short * myScreenBase5 = (unsigned short*) 0x06002800;
unsigned short * myScreenBase6 = (unsigned short*) 0x06003000;
unsigned short * myScreenBase7 = (unsigned short*) 0x06003800;
unsigned short * myScreenBase8 = (unsigned short*) 0x06004000;
unsigned short * myScreenBase9 = (unsigned short*) 0x06004800;
unsigned short * myScreenBase10 = (unsigned short*) 0x06005000;
unsigned short * myScreenBase11 = (unsigned short*) 0x06005800;
unsigned short * myScreenBase12 = (unsigned short*) 0x06006000;
unsigned short * myScreenBase13 = (unsigned short*) 0x06006800;
unsigned short * myScreenBase14 = (unsigned short*) 0x06007000;
unsigned short * myScreenBase15 = (unsigned short*) 0x06007800;
//Point to background control registers and change settings
extern unsigned short * myBg0;
extern unsigned short * myBg1;
extern unsigned short * myBg2;
extern unsigned short * myBg3;

//Gba affine matrix formula to create rotation data.
void SetRotData(float angle , int index){
	
	//We want the first Object (thePlayerArrow) to be rotScaled ( https://www.coranac.com/tonc/text/affine.htm )
	/*The basic form of the equations for rotating and scaling is as follows:
	pa = x_scale * cos(angle);
	pb =y_scale * sin(angle);
	pc =x_scale * -sin(angle);
	pd =y_scale * cos(angle);
	It is set amongst four consecutive sprites , on their last attribute
	*/
	//scale factor (N) is 256.
	
	int n = 256;	
	int pa,pb,pc,pd;
	index*=4;//To aim right oam index
	
	//math.h (Angles in gba go counter clockWise)
	pa = 1*cos(angle*M_PI/180)*n;
	pb = 1*sin(angle*M_PI/180)*n;
	pc = -1*sin(angle*M_PI/180)*n;
	pd = 1*cos(angle*M_PI/180)*n;
	
	//Set data at index
		 //ObjN0       //Value
	myOAM[(index+0)*4 + 3] = pa;
		 //ObjN0       //Value
	myOAM[(index+1)*4 + 3] = pb;
		 //ObjN0       //Value
	myOAM[(index+2)*4 + 3] = pc;
		 //ObjN0       //Value
	myOAM[(index+3)*4 + 3] = pd;	
}
//Called in SetUpData() to set starting screens
void ScreenBaseInit(){
	///SCREEN BASES
	//In default setup , its 256x256 pixels for 8x8 characters , meaning 32x32 characters fit , some invisible
	//MENU AREA
	for (int y = 0 ; y < 20 ; y++){
		for (int x = 0 ; x < 30 ; x++){
			//Basic foreground
			myScreenBase5[(y*32)+ x] = ((43 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			//Basic background
			myScreenBase7[(y*32)+ x] = ((41 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			//Some foreground windows :)
			if (x > 2 && x < 7 && ((y > 0 && y < 5) || (y > 5 && y < 10) || (y > 10 && y < 15))) myScreenBase5[(y*32) + x] = ((45 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			if (x > 24 && x < 29 && ((y > 2 && y < 7) || (y > 7 && y < 12) || (y > 12 && y < 17))) myScreenBase5[(y*32) + x] = ((50 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			//Curtain borders
			if (x == 0){
			if ( y > 0 && y < 19) myScreenBase4[(y*32)+ x] = ((53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			else if (y==0)	myScreenBase4[(y*32)+ x] = ((52 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			else if ( y==19) myScreenBase4[(y*32)+ x] = ((54 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			}
			if (x == 29){
			if ( y > 0 && y < 19) myScreenBase4[(y*32)+ x] = ((53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
			else if (y==0)	myScreenBase4[(y*32)+ x] = ((52 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
			else if ( y==19) myScreenBase4[(y*32)+ x] = ((54 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
			}
			//Rope/Lamps
			if ( y == 11){
				if ( x > 8 && x < 22 ) {
					myScreenBase4 [(y*32)+ x] = ( (42 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
				}
				else if (x ==8 || x == 22) myScreenBase4[(y*32) + x] = ( (44 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			}
			//Bottom fence
			if ( y == 19 ) {
				if ( x > 0 && x < 29) myScreenBase4[(y*32) + x] = ( (72 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			}
		}
	}
	
	//GAME TITLE
	//HAUNTED
	myScreenBase4[(3*32) + 9] = ( (18 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(3*32) + 10] = ( (11 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(3*32) + 11] = ( (31 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(3*32) + 12] = ( (24 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(3*32) + 13] = ( (30 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(3*32) + 14] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(3*32) + 15] = ( (14 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//BOBBLE
	myScreenBase4[(3*32) + 17] = ( (12 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(3*32) + 18] = ( (25 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(3*32) + 19] = ( (12 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(3*32) + 20] = ( (12 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(3*32) + 21] = ( (22 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(3*32) + 22] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//GOTY
	myScreenBase4[(5*32) + 8] = ( (17 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(5*32) + 9] = ( (25 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(5*32) + 10] = ( (30 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(5*32) + 11] = ( (35 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//EDITION
	myScreenBase4[(5*32) + 13] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(5*32) + 14] = ( (14 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(5*32) + 15] = ( (19 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(5*32) + 16] = ( (30 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(5*32) + 17] = ( (19 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(5*32) + 18] = ( (25 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(5*32) + 19] = ( (24 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//1.0
	myScreenBase4[(5*32) + 21] = ( (2 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(5*32) + 22] = ( (39 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(5*32) + 23] = ( (1 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );

	//GO!							//ID     //Flip h    //Flip v    //Palette
	myScreenBase4[(10*32)+ 10] = ( (17 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(10*32)+ 11] = ( (25 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(10*32)+ 12] = ( (37 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//INFO
	myScreenBase4[(10*32) + 17] = ( (19 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(10*32) + 18] = ( (24 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(10*32) + 19] = ( (16 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(10*32) + 20] = ( (25 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );

	//Decorations
	//Curtains
	myScreenBase4 [(3*32)+ 25] = ( (52 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4 [(4*32)+ 25] = ( (53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4 [(5*32)+ 25] = ( (54 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase4 [(3*32)+ 28] = ( (52 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4 [(4*32)+ 28] = ( (53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4 [(5*32)+ 28] = ( (54 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase4[(1*32) + 3] = ( (52 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(2*32) + 3] = ( (53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(3*32) + 3] = ( (53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(4*32) + 3] = ( (53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(5*32) + 3] = ( (54 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase4[(1*32) + 6] = ( (52 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(2*32) + 6] = ( (53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(3*32) + 6] = ( (53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(4*32) + 6] = ( (53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(5*32) + 6] = ( (54 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	//Moon
	myScreenBase6[(2*32) + 25] = ( (58 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(3*32) + 25] = ( (59 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(4*32) + 25] = ( (60 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(2*32) + 26] = ( (61 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(3*32) + 26] = ( (62 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(4*32) + 26] = ( (63 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(2*32) + 27] = ( (58 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(3*32) + 27] = ( (59 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(4*32) + 27] = ( (60 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	//Mountains
	myScreenBase6[(7*32) + 3] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(7*32) + 4] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase6[(8*32) + 3] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(8*32) + 4] = ( (65 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase6[(9*32) + 3] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(9*32) + 4] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(9*32) + 5] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase6[(11*32) + 3] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(11*32) + 4] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(11*32) + 5] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(11*32) + 6] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase6[(12*32) + 3] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(12*32) + 4] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(12*32) + 5] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(12*32) + 6] = ( (65 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase6[(13*32) + 3] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(13*32) + 4] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(13*32) + 5] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(13*32) + 6] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(13*32) + 28] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase6[(14*32) + 3] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(14*32) + 4] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(14*32) + 5] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(14*32) + 6] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(14*32) + 27] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(14*32) + 28] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase6[(15*32) + 27] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(15*32) + 28] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase6[(16*32) + 26] = ( (64 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(16*32) + 27] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6[(16*32) + 28] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );

	//Skulls
	myScreenBase4 [(8*32)+ 10] = ( (46 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4 [(8*32)+ 11] = ( (46 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4 [(8*32)+ 12] = ( (46 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//Ghosts
	myScreenBase6 [(6*32)+ 5] = ( (48 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6 [(6*32)+ 6] = ( (48 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6 [(7*32)+ 5] = ( (49 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6 [(7*32)+ 6] = ( (49 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase6 [(6*32)+ 25] = ( (48 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6 [(6*32)+ 26] = ( (48 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6 [(7*32)+ 25] = ( (49 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6 [(7*32)+ 26] = ( (49 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase4 [(7*32)+ 18] = ( (48 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4 [(7*32)+ 19] = ( (48 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4 [(8*32)+ 18] = ( (49 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4 [(8*32)+ 19] = ( (49 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase6 [(9*32)+ 27] = ( (48 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6 [(9*32)+ 28] = ( (48 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6 [(10*32)+ 27] = ( (49 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6 [(10*32)+ 28] = ( (49 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase6 [(15*32)+ 24] = ( (48 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6 [(15*32)+ 25] = ( (48 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6 [(16*32)+ 24] = ( (49 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase6 [(16*32)+ 25] = ( (49 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	//Tombs
	myScreenBase4[(17*32) + 9] = ( (73 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(17*32) + 10] = ( (73 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(18*32) + 9] = ( (74 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(18*32) + 10] = ( (74 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(19*32) + 9] = ( (75 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(19*32) + 10] = ( (75 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase4[(17*32) + 19] = ( (73 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(17*32) + 20] = ( (73 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(18*32) + 19] = ( (74 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(18*32) + 20] = ( (74 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(19*32) + 19] = ( (75 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase4[(19*32) + 20] = ( (75 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	//CREDITS MENU AREA
	for (int y = 0 ; y < 20 ; y++){
		for (int x = 0 ; x < 30 ; x++){
		myScreenBase9[(y*32)+x] = ( (43 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
		myScreenBase11[(y*32)+x] = ( (41 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
		//Windows
		if (x > 20 && x < 29  && y > 0 && y < 10) myScreenBase9[(y*32) + x] =  ( (50 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
		if ( x > 1 && x < 29 && y > 15 && y < 19 ) myScreenBase9[(y*32) + x] =  ( (45 << 0) | (0 << 10) | (1 << 11) | (0 << 12) );
		}
	}
	//MADE BY
	myScreenBase8[(3*32) + 5] = ( (23 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(3*32) + 6] = ( (11 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(3*32) + 7] = ( (14 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(3*32) + 8] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(3*32) + 10] = ( (12 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(3*32) + 11] = ( (35 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//JAVIER DIEGUEZ
	myScreenBase8[(5*32) + 5] = ( (20 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 6] = ( (11 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 7] = ( (32 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 8] = ( (19 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 9] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 10] = ( (28 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 12] = ( (14 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 13] = ( (19 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 14] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 15] = ( (17 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 16] = ( (31 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 17] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 18] = ( (36 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//MUSIC BY
	myScreenBase8[(7*32) + 5] = ( (23 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(7*32) + 6] = ( (31 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(7*32) + 7] = ( (29 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(7*32) + 8] = ( (19 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(7*32) + 9] = ( (13 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(7*32) + 11] = ( (12 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(7*32) + 12] = ( (35 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//JAVIER DIEGUEZ
	myScreenBase8[(9*32) + 5] = ( (20 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 6] = ( (11 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 7] = ( (32 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 8] = ( (19 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 9] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 10] = ( (28 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 12] = ( (14 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 13] = ( (19 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 14] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 15] = ( (17 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 16] = ( (31 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 17] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 18] = ( (36 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	//CONTROLS (USE ARROW KEYS, A, SELECT, START BUTTONS)
	myScreenBase8[(12*32) + 5] = ( (31 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 6] = ( (29 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 7] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase8[(12*32) + 9] = ( (11 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 10] = ( (28 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 11] = ( (28 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 12] = ( (25 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 13] = ( (33 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase8[(12*32) + 15] = ( (21 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 16] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 17] = ( (35 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 18] = ( (29 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 19] = ( (40 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase8[(12*32) + 21] = ( (11 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 22] = ( (40 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase8[(14*32) + 5] = ( (29 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 6] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 7] = ( (22 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 8] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 9] = ( (13 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 10] = ( (30 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase8[(14*32) + 12] = ( (11 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 13] = ( (24 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 14] = ( (14 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase8[(14*32) + 16] = ( (29 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 17] = ( (30 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 18] = ( (11 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 19] = ( (28 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 20] = ( (30 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase8[(14*32) + 22] = ( (12 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 23] = ( (31 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 24] = ( (30 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 25] = ( (30 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 26] = ( (25 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 27] = ( (24 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 28] = ( (29 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );

	//Decorations
	//Spider
	myScreenBase8[(0*32) + 2] = ( (55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(1*32) + 2] = ( (55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(2*32) + 2] = ( (55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(3*32) + 2] = ( (55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(4*32) + 2] = ( (55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 3] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(6*32) + 3] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(7*32) + 3] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(8*32) + 3] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 3] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(10*32) + 3] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(11*32) + 3] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 3] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(13*32) + 2] = ( (56 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(13*32) + 3] = ( (56 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 2] = ( (57 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 3] = ( (57 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	//Cobwebs
	myScreenBase8[(0*32) + 29] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(1*32) + 29] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(2*32) + 29] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(3*32) + 29] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(4*32) + 29] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 29] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(6*32) + 29] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(7*32) + 29] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(8*32) + 29] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(9*32) + 28] = ( (55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(10*32) + 28] = ( (55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(11*32) + 28] = ( (55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 28] = ( (55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(13*32) + 29] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(14*32) + 29] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(15*32) + 29] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(16*32) + 29] = ( (55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(17*32) + 28] = ( (55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(18*32) + 28] = ( (55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(19*32) + 28] = ( (55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//Insects
	myScreenBase10[(4*32) + 23] = ( (47 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(11*32) + 14] = ( (47 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(12*32) + 27] = ( (47 << 0) | (0 << 10) | (1 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 9] = ( (47 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(17*32) + 4] = ( (47 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(16*32) + 22] = ( (47 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	//Moon
	myScreenBase10[(2*32) + 25] = ( (58 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(3*32) + 25] = ( (59 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(4*32) + 25] = ( (60 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(2*32) + 26] = ( (61 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(3*32) + 26] = ( (62 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(4*32) + 26] = ( (63 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(2*32) + 27] = ( (58 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(3*32) + 27] = ( (59 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(4*32) + 27] = ( (60 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	//Mountains
	myScreenBase10[(5*32) + 24] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(5*32) + 25] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase10[(6*32) + 24] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(6*32) + 25] = ( (65 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase10[(7*32) + 21] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(7*32) + 23] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(7*32) + 24] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(7*32) + 25] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(7*32) + 26] = ( (64 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );

	myScreenBase10[(8*32) + 21] = ( (65 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(8*32) + 23] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(8*32) + 24] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(8*32) + 25] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(8*32) + 26] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(8*32) + 27] = ( (64 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase10[(9*32) + 21] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(9*32) + 22] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(9*32) + 23] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(9*32) + 24] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(9*32) + 25] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(9*32) + 26] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(9*32) + 27] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(9*32) + 28] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase10[(16*32) + 2] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 3] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 4] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 5] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 6] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 17] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 18] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 19] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 20] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 21] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 22] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 23] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 24] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 25] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 26] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 27] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(16*32) + 28] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase10[(17*32) + 2] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 3] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 4] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 5] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 6] = ( (65 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 13] = ( (68 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 14] = ( (68 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 17] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 18] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 19] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 20] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 21] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 22] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 23] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 24] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 25] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 26] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 27] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(17*32) + 28] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase10[(18*32) + 2] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 3] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 4] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 5] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 6] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 7] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 8] = ( (68 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 9] = ( (68 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 10] = ( (64 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 11] = ( (64 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 12] = ( (68 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 13] = ( (71 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 14] = ( (71 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 15] = ( (68 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 16] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 17] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 18] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 19] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 20] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 21] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 22] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 23] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 24] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 25] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 26] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 27] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase10[(18*32) + 28] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	//Curtains
	myScreenBase8[(1*32) + 21] = ( (52 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(2*32) + 21] = ( (53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(3*32) + 21] = ( (53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(4*32) + 21] = ( (53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 21] = ( (53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(6*32) + 21] = ( (53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(7*32) + 21] = ( (53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(8*32) + 21] = ( (54 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase8[(1*32) + 28] = ( (52 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(2*32) + 28] = ( (53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(3*32) + 28] = ( (53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(4*32) + 28] = ( (53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(5*32) + 28] = ( (53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(6*32) + 28] = ( (53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(7*32) + 28] = ( (53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase8[(8*32) + 28] = ( (54 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );

	//GAME AREA
	for (int y = 0 ; y < 20 ; y++){
		for (int x = 0 ; x < 30 ; x++){
			myScreenBase15[(y*32)+ x] = ((41 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			//Empty game area
			if (!(x >=5 && x <= 22 && y <= 14)){
				//Emtpy foreground
				myScreenBase13[(y*32) + x] = ((43 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			}
			//Windows 
			if ( x > 23 && x < 29 ){
				if ( y > 0 && y < 12 ){
					myScreenBase13[(y*32) + x] = ((45 << 0) | (1 << 10) | (1 << 11) | (0 << 12) );
				}
			}
			if (x>0 && x <4){
				if (y > 0 && y < 4) myScreenBase13[(y*32) + x] = ((45 << 0) | (1 << 10) | (1 << 11) | (0 << 12) );
				if (y > 4 && y < 8) myScreenBase13[(y*32) + x] = ((45 << 0) | (1 << 10) | (1 << 11) | (0 << 12) );
				if (y > 8 && y < 12) myScreenBase13[(y*32) + x] = ((50 << 0) | (1 << 10) | (1 << 11) | (0 << 12) );
				if (y > 12 && y < 16) myScreenBase13[(y*32) + x] = ((50 << 0) | (1 << 10) | (1 << 11) | (0 << 12) );
			}
			//Columns
			if (x == 5 || x == 22){
				if ( y < 15){
					myScreenBase13[(y*32)+ x] = ((51 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
				}
				else myScreenBase13[(y*32)+ x] = ((45 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );

			}
			//Rope
			if((x > 5 && x < 22) && y==15) myScreenBase12[(y*32)+ x] = ((42 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
		}
	}
	
	//Decorations
	//Lamps
	myScreenBase12[(15*32)+ 5] = ((44 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(15*32)+ 22] = ((44 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//Magic ball
	myScreenBase12[(17*32) + 9] = ((76 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(18*32) + 9] = ((77 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(19*32) + 9] = ((78 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//Ghosts
	myScreenBase12[(17*32) + 7] = ((48 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(17*32) + 8] = ((48 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(18*32) + 7] = ((49 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(18*32) + 8] = ((49 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );

	myScreenBase14[(8*32) + 24] = ((48 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(8*32) + 25] = ((48 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(9*32) + 24] = ((49 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(9*32) + 25] = ((49 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	//Insects
	myScreenBase14[(6*32) + 27] = ((47 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(9*32) + 1] = ((47 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(19*32) + 24] = ((47 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	//Cobwebs
	myScreenBase12[(0*32) + 1] = ((79 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(1*32) + 1] = ((80 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(0*32) + 2] = ((80 << 0) | (1 << 10) | (1 << 11) | (0 << 12) );
	myScreenBase12[(1*32) + 2] = ((79 << 0) | (1 << 10) | (1 << 11) | (0 << 12) );
	
	myScreenBase12[(18*32) + 0] = ((79 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(19*32) + 0] = ((80 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(18*32) + 1] = ((79 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(19*32) + 1] = ((80 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	//Spiders
	myScreenBase12[(2*32) + 1] = ((55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(3*32) + 1] = ((55 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(4*32) + 2] = ((55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(5*32) + 2] = ((55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(6*32) + 2] = ((55 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(7*32) + 1] = ((56 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(7*32) + 2] = ((56 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(8*32) + 1] = ((57 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(8*32) + 2] = ((57 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	//Curtains
	myScreenBase12[(1*32)+ 28] = ((52 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(2*32)+ 28] = ((53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(3*32)+ 28] = ((53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(4*32)+ 28] = ((53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(5*32)+ 28] = ((53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(6*32)+ 28] = ((53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(7*32)+ 28] = ((53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(8*32)+ 28] = ((53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(9*32)+ 28] = ((53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(10*32)+ 28] = ((53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(11*32)+ 28] = ((53 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(12*32)+ 28] = ((54 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase12[(1*32)+ 24] = ((52 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(2*32)+ 24] = ((53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(3*32)+ 24] = ((53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(4*32)+ 24] = ((53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(5*32)+ 24] = ((53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(6*32)+ 24] = ((53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(7*32)+ 24] = ((53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(8*32)+ 24] = ((53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(9*32)+ 24] = ((53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(10*32)+ 24] = ((53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(11*32)+ 24] = ((53 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase12[(12*32)+ 24] = ((54 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//Moon
	myScreenBase14[(2*32) + 25] = ( (58 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(3*32) + 25] = ( (59 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(4*32) + 25] = ( (60 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(2*32) + 26] = ( (61 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(3*32) + 26] = ( (62 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(4*32) + 26] = ( (63 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(2*32) + 27] = ( (58 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(3*32) + 27] = ( (59 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(4*32) + 27] = ( (60 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	//Mountains
	myScreenBase14[(6*32) + 28] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase14[(7*32) + 28] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase14[(8*32) + 11] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(8*32) + 12] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(8*32) + 27] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(8*32) + 28] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase14[(9*32) + 7] = ( (70 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(9*32) + 8] = ( (70 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(9*32) + 11] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(9*32) + 12] = ( (65 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(9*32) + 27] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(9*32) + 28] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase14[(10*32) + 3] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(10*32) + 7] = ( (69 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(10*32) + 8] = ( (69 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(10*32) + 10] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(10*32) + 11] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(10*32) + 12] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(10*32) + 13] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(10*32) + 18] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(10*32) + 19] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(10*32) + 26] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(10*32) + 27] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(10*32) + 28] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase14[(11*32) + 3] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 5] = ( (65 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 6] = ( (68 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 7] = ( (71 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 8] = ( (71 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 9] = ( (68 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 10] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 11] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 12] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 13] = ( (65 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 18] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 19] = ( (65 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 26] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 27] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(11*32) + 28] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );	
	
	myScreenBase14[(12*32) + 5] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(12*32) + 6] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(12*32) + 7] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(12*32) + 8] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(12*32) + 9] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(12*32) + 10] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(12*32) + 11] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(12*32) + 12] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(12*32) + 13] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(12*32) + 14] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(12*32) + 17] = ( (66 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(12*32) + 18] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(12*32) + 19] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(12*32) + 20] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase14[(13*32) + 2] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 3] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 5] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 6] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 7] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 8] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 9] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 10] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 11] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 12] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 13] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 14] = ( (65 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 15] = ( (68 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 16] = ( (68 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 17] = ( (65 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 18] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 19] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(13*32) + 20] = ( (65 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase14[(14*32) + 1] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 2] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 3] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 5] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 6] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 7] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 8] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 9] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 10] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 11] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 12] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 13] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 14] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 15] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 16] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 17] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 18] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 19] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 20] = ( (67 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(14*32) + 21] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );

	myScreenBase14[(15*32) + 1] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(15*32) + 2] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(15*32) + 3] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(15*32) + 5] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(15*32) + 21] = ( (65 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase14[(16*32) + 5] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(16*32) + 22] = ( (66 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase14[(17*32) + 5] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(17*32) + 22] = ( (65 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase14[(18*32) + 5] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(18*32) + 22] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	myScreenBase14[(19*32) + 5] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	myScreenBase14[(19*32) + 22] = ( (67 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	//TEXT/HUD
	//D								//ID     //Flip h    //Flip v    //Palette
	myScreenBase12[(17*32) + 1] = ( (14 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//R
	myScreenBase12[(17*32) + 2] = ( (28 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//O
	myScreenBase12[(17*32) + 3] = ( (25 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//P
	myScreenBase12[(17*32) + 4] = ( (26 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	//S 						   //ID     //Flip h    //Flip v    //Palette
	myScreenBase12[(14*32) + 24] = ( (29 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//C
	myScreenBase12[(14*32) + 25] = ( (13 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//O
	myScreenBase12[(14*32) + 26] = ( (25 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//R
	myScreenBase12[(14*32) + 27] = ( (28 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//E
	myScreenBase12[(14*32) + 28] = ( (15 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	//G 						   //ID     //Flip h    //Flip v    //Palette
	myScreenBase12[(17*32) + 25] = ( (17 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//O
	myScreenBase12[(17*32) + 26] = ( (25 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//A
	myScreenBase12[(17*32) + 27] = ( (11 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//L
	myScreenBase12[(17*32) + 28] = ( (22 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	//Score goal in two vars , for their respective SBB
	unsigned short goalDig1 = (unsigned short)SCORE_MAX/10;
	unsigned short goalDig2 = SCORE_MAX - goalDig1*10;
	//Goal number display
	myScreenBase12[(18*32) + 26] = ( ((1+goalDig1) << 0) | (0 << 10) | (0 << 11) | (0 << 12) );	
	myScreenBase12[(18*32) + 27] = ( ((1+goalDig2) << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
}
//Starting gba settings. Called once.
void SetUpData(){
	/**PRESUMABLY THINGS THAT ONLY NEED TO BE SET UP ONCE**/	
	///IMPORTED TILE DATA
	//Set sprites/tiles/fonts
	for(int i= 0; i < 2048 ; i++){
		myObjCharBase[i] = objCharData[i];
		myBgCharBase[i] =  charBase1Data[i];
	}
	
	///ROTATION DATA
	//Create rotation data
	//Runs 128/4 = 32 times
	int angle = 12.5;
	for (int index=0 ; index<32 ; index++){
		//i=0 , i=4 , i= 8 ,... i = 124
		//myAngle = 10 , 15,20,...170
		SetRotData(angle,index);
		angle+=5;
	}
	
	///DISPCNT / BACKGROUND SETTINGS
	//Backgrounds , dispcnt , background layers , screen base block
	//0x04000000    //G Mode  //1DObj    //BG0      //BG1	   //BG2       //BG3       //ObjsOnOff
	myDispcnt[0] = ( (0 << 0) | (1 << 6) | (1 << 8) | (1 << 9) | (1 << 10) | (1 << 11) | (1 << 12) );
	
	///BACKGROUND PALETTE
	//Define colours in specified bg palettte
	myBgPalette[(0*16) + 0] = ((31 << 0) | (31 << 5) | (31 << 10)); // White in transparent position
	myBgPalette[(0*16) + 1] = ((30 << 0) | (30 << 5) | (30 << 10)); //Almost white
	myBgPalette[(0*16) + 2] = ((24 << 0) | (24 << 5) | (24 << 10));//Bright Grey
	myBgPalette[(0*16) + 3] = ((13 << 0) | (13 << 5) | (13 << 10)); //Grey
	myBgPalette[(0*16) + 4] = ((0 << 0) | (0 << 5) | (0 << 10)); // Black
	myBgPalette[(0*16) + 5] = ((22 << 0) | (22 << 5) | (0 << 10)); // Yellow
	myBgPalette[(0*16) + 6] = ((26 << 0) | (9 << 5) | (0 << 10)); //Orange
	myBgPalette[(0*16) + 7] = ((26 << 0) | (0 << 5) | (0 << 10)); // Red

	myBgPalette[(0*16) + 8] = ((23 << 0) | (0 << 5) | (9 << 10));//Softer Red	
	myBgPalette[(0*16) + 9] = ((23 << 0) | (0 << 5) | (23 << 10));//Pink		
	myBgPalette[(0*16) + 10] = ((16 << 0) | (0 << 5) | (25 << 10));//Purple
	myBgPalette[(0*16) + 11] = ((0 << 0) | (11 << 5) | (11 << 10));//Blueish Green
	myBgPalette[(0*16) + 12] = ((0 << 0) | (23 << 5) | (23 << 10));//Bright Blue	
	myBgPalette[(0*16) + 13] = ((0 << 0) | (0 << 5) | (23 << 10));//Blue	
	myBgPalette[(0*16) + 14] = ((17 << 0) | (0 << 5) | (0 << 10)); //Brownish
	myBgPalette[(0*16) + 15] = ((0 << 0) | (24 << 5) | (0 << 10));//Bright Green
	
	///OBJECT PALETTE
	//Define colours in specified obj palette
	myObjPalette[(0*16) + 0] = ((31 << 0) | (31 << 5) | (31 << 10)); // White in transparent position
	myObjPalette[(0*16) + 1] = ((30 << 0) | (30 << 5) | (30 << 10)); //Almost white
	myObjPalette[(0*16) + 2] = ((24 << 0) | (24 << 5) | (24 << 10));//Bright Grey
	myObjPalette[(0*16) + 3] = ((15 << 0) | (15 << 5) | (15 << 10)); //Grey
	myObjPalette[(0*16) + 4] = ((0 << 0) | (0 << 5) | (0 << 10)); // Black
	myObjPalette[(0*16) + 5] = ((31 << 0) | (31 << 5) | (0 << 10)); // Yellow
	myObjPalette[(0*16) + 6] = ((31 << 0) | (12 << 5) | (0 << 10)); //Orange
	myObjPalette[(0*16) + 7] = ((31 << 0) | (0 << 5) | (0 << 10)); // Red

	myObjPalette[(0*16) + 8] = ((31 << 0) | (0 << 5) | (13 << 10));//Softer Red	
	myObjPalette[(0*16) + 9] = ((31 << 0) | (0 << 5) | (31 << 10));//Pink		
	myObjPalette[(0*16) + 10] = ((22 << 0) | (0 << 5) | (31 << 10));//Purple
	myObjPalette[(0*16) + 11] = ((0 << 0) | (18 << 5) | (18 << 10));//Blueish Green
	myObjPalette[(0*16) + 12] = ((0 << 0) | (31 << 5) | (31 << 10));//Bright Blue	
	myObjPalette[(0*16) + 13] = ((0 << 0) | (4 << 5) | (31 << 10));//Blue	
	myObjPalette[(0*16) + 14] = ((20 << 0) | (0 << 5) | (0 << 10)); //Brownish
	myObjPalette[(0*16) + 15] = ((0 << 0) | (31 << 5) | (3 << 10));//Bright Green
	
	///SCREEN BASES
	ScreenBaseInit();
}
//Before every game startup
GameScene SetUpGame(){
	
				//Prior   //CBB	     //COLMODE  //SBB(MENU)//SIZE(256*256)
	myBg0[0] = ( (0 << 0) | (0 << 2) | (0 << 7) | (12 << 8) | (0 << 14) );
	myBg1[0] = ( (1 << 0) | (0 << 2) | (0 << 7) | (13 << 8) | (0 << 14) );
	myBg2[0] = ( (2 << 0) | (0 << 2) | (0 << 7) | (14 << 8) | (0 << 14) );
	myBg3[0] = ( (3 << 0) | (0 << 2) | (0 << 7) | (15 << 8) | (0 << 14) ); 
	
	//SCREEN BASE (RESET)
	for (int y = 0 ; y < 15 ; y++){
		for (int x = 5 ; x < 23 ; x++){
			//Erase ceiling drop
			myScreenBase13[(y*32) + x] = ((0 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			//Columns
			if (x == 5){
				//Erase skull columns
				myScreenBase13[(y*32)+ x] = ((51 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
				myScreenBase12[(y*32)+ x] = ((0 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			}
			if (x == 22){
				//Erase skull columns
				myScreenBase13[(y*32)+ x] = ((51 << 0) | (1 << 10) | (0 << 11) | (0 << 12) );
				myScreenBase12[(y*32)+ x] = ((0 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
			}					
		}
	}
	//CEILING DROP VALUE
	myScreenBase12[(18*32) + 3] = ( ((TIMER_FREQ+1) << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//SCORE VALUE
	//0
	myScreenBase12[(15*32) + 26] = ( (1 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	//0
	myScreenBase12[(15*32) + 27] = ( (1 << 0) | (0 << 10) | (0 << 11) | (0 << 12) );
	
	GameScene myGs = {
		.yTimer = TIMER_FREQ ,
		.yOffset = 0,
		.staticBallCount = 0,
		.score = 0,
		.nextColour = 13,
		.myPlayer.position.x = 85,
		.myPlayer.position.y = 128,
		.myPlayer.canFire = true,
		.myPlayer.rotIndex = 0,
		.myPlayer.myAddress = myOAM,
		.myPlayer.ID = 5,
	};
	//SETUP STARTING GRID (Colours go from 13-16)
	SetUpStaticBall(&myGs,0,0,13);SetUpStaticBall(&myGs,1,0,14);SetUpStaticBall(&myGs,2,0,15);
	SetUpStaticBall(&myGs,3,0,16);SetUpStaticBall(&myGs,4,0,13);SetUpStaticBall(&myGs,5,0,14);
	SetUpStaticBall(&myGs,6,0,16);SetUpStaticBall(&myGs,7,0,13);SetUpStaticBall(&myGs,8,0,13);
	SetUpStaticBall(&myGs,9,0,13);SetUpStaticBall(&myGs,10,0,13);SetUpStaticBall(&myGs,11,0,16);
	SetUpStaticBall(&myGs,12,0,13);SetUpStaticBall(&myGs,13,0,14);SetUpStaticBall(&myGs,14,0,15);
	SetUpStaticBall(&myGs,15,0,16);
	
	SetUpStaticBall(&myGs,0,1,14);SetUpStaticBall(&myGs,1,1,15);SetUpStaticBall(&myGs,2,1,16);
	SetUpStaticBall(&myGs,3,1,13);SetUpStaticBall(&myGs,4,1,14);SetUpStaticBall(&myGs,5,1,16);
	SetUpStaticBall(&myGs,6,1,13);SetUpStaticBall(&myGs,7,1,15);SetUpStaticBall(&myGs,8,1,14);
	SetUpStaticBall(&myGs,9,1,15);SetUpStaticBall(&myGs,10,1,13);SetUpStaticBall(&myGs,11,1,16);
	SetUpStaticBall(&myGs,12,1,14);SetUpStaticBall(&myGs,13,1,15);SetUpStaticBall(&myGs,14,1,16);
	SetUpStaticBall(&myGs,15,1,13);
	
	SetUpStaticBall(&myGs,0,2,15);SetUpStaticBall(&myGs,1,2,16);SetUpStaticBall(&myGs,2,2,13);
	SetUpStaticBall(&myGs,3,2,14);SetUpStaticBall(&myGs,4,2,15);SetUpStaticBall(&myGs,5,2,13);
	SetUpStaticBall(&myGs,6,2,16);SetUpStaticBall(&myGs,7,2,13);SetUpStaticBall(&myGs,8,2,14);
	SetUpStaticBall(&myGs,9,2,14);SetUpStaticBall(&myGs,10,2,13);SetUpStaticBall(&myGs,11,2,16);
	SetUpStaticBall(&myGs,12,2,15);SetUpStaticBall(&myGs,13,2,16);SetUpStaticBall(&myGs,14,2,13);
	SetUpStaticBall(&myGs,15,2,14);
	
	SetUpStaticBall(&myGs,0,3,15);SetUpStaticBall(&myGs,1,3,16);SetUpStaticBall(&myGs,2,3,13);
	SetUpStaticBall(&myGs,3,3,14);SetUpStaticBall(&myGs,4,3,15);SetUpStaticBall(&myGs,5,3,13);
	SetUpStaticBall(&myGs,6,3,16);SetUpStaticBall(&myGs,7,3,15);SetUpStaticBall(&myGs,8,3,15);
	SetUpStaticBall(&myGs,9,3,15);SetUpStaticBall(&myGs,10,3,16);SetUpStaticBall(&myGs,11,3,14);
	SetUpStaticBall(&myGs,12,3,15);SetUpStaticBall(&myGs,13,3,16);SetUpStaticBall(&myGs,14,3,13);
	SetUpStaticBall(&myGs,15,3,14);
	
	SetUpStaticBall(&myGs,0,4,16);SetUpStaticBall(&myGs,1,4,13);SetUpStaticBall(&myGs,2,4,14);
	SetUpStaticBall(&myGs,3,4,15);SetUpStaticBall(&myGs,4,4,16);SetUpStaticBall(&myGs,5,4,14);
	SetUpStaticBall(&myGs,6,4,15);SetUpStaticBall(&myGs,7,4,16);SetUpStaticBall(&myGs,8,4,13);
	SetUpStaticBall(&myGs,9,4,13);SetUpStaticBall(&myGs,10,4,16);SetUpStaticBall(&myGs,11,4,15);
	SetUpStaticBall(&myGs,12,4,16);SetUpStaticBall(&myGs,13,4,13);SetUpStaticBall(&myGs,14,4,14);
	SetUpStaticBall(&myGs,15,4,15);
	UpdateGrid(&myGs, false);
	
	
	//Next Ball Colour	 //y
	myOAM[(127*4) + 0] = ( (136 << 0) | (0 << 8) | (0 << 9) | (0 << 14) );
						//x		   //HFlip 	   //VFlip	   //Size        
	myOAM[(127*4) + 1] = ( (72 << 0) | (0 << 12) | (0 << 13) | (0 << 14) );
						   //ID      				//Priority  //Palette
	myOAM[(127*4) + 2] = ( (myGs.nextColour << 0) | (1 << 10) | (0 << 12) );
	
	return myGs;
}